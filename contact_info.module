<?php

/**
 * @file
 * Contact info module that provides blocks and tokens.
 */

/**
 * Implements hook_menu().
 */
function contact_info_menu() {
  $items['admin/content/contact-info'] = array(
    'title' => 'Contact information',
    'file' => 'includes/contact_info.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contact_info_setup'),
    'access arguments' => array('modify contact info'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function contact_info_permission() {
  return array(
    'modify contact info' => array(
      'title' => t('Modify contact information'),
      'description' => t('Modify contact and social media information.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function contact_info_theme() {
  return array(
    'contact_info_social_draggable_table' => array(
      'render element' => 'form',
      'file' => 'includes/contact_info.admin.inc',
    ),
    'address' => array(
      'variables' => array(
        'country_name' => NULL,
        'legal_name' => NULL,
        'street_address' => NULL,
        'street_address_2' => NULL,
        'locality' => NULL,
        'region' => NULL,
        'postal_code' => NULL,
      ),
      'template' => 'address',
    ),
  );
}

/**
 * Processes variables twitter_pull templates.
 */
function contact_info_preprocess(&$variables, $hook) {
  switch ($hook) {
    case 'address':
      // Any preprocessing should go here.
      break;
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function contact_info_contextual_links_view_alter(&$element, &$items) {
  // Contextual link to edit contact info.
  if (isset($element['#element']['#block'])) {
    switch ($element['#element']['#block']->delta) {
      case 'address':
      case 'phone':
      case 'fax':
        $element['#links']['edit-content'] = array(
          'title' => 'Edit contact info',
          'href' => url('admin/content/contact-info', array(
            'absolute' => TRUE,
            'query' => array(
              'destination' => current_path(),
            ),
          )),
        );
        break;
      case 'social':
        $element['#links']['edit-content'] = array(
          'title' => 'Edit social media links',
          'href' => url('admin/content/contact-info', array(
            'fragment' => 'contact-info-social-media-wrapper',
            'absolute' => TRUE,
            'query' => array(
              'destination' => current_path(),
            ),
          )),
        );
        break;
    }
  }
}

/**
 * Implements hook_block_info().
 */
function contact_info_block_info() {
  $blocks['address'] = array(
    'info' => t('Address'),
  );
  $blocks['map'] = array(
    'info' => t('Map/directions'),
  );
  $blocks['phone'] = array(
    'info' => t('Phone number'),
  );
  $blocks['fax'] = array(
    'info' => t('Fax number'),
  );
  $blocks['social'] = array(
    'info' => t('Social links'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function contact_info_block_view($delta = '') {
  $block = array('subject' => NULL, 'content' => NULL);

  switch ($delta) {
    case 'address':
      $block['content'] = contact_info_address_block();
      break;
    case 'map':
      $block['content'] = contact_info_map_block();
      break;
    case 'phone':
      $block['subject'] = t('Phone');
      $block['content'] = contact_info_phone_block();
      break;
    case 'fax':
      $block['subject'] = t('Fax');
      $block['content'] = contact_info_fax_block();
      break;
    case 'social':
      $block['content'] = contact_info_social_block();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function contact_info_block_configure($delta = '') {
  $form = array();

  // Configuration form for map/directions block.
  if ($delta == 'map') {
    $map_data = variable_get('contact_info_map', '');

    $form['api_key'] = array(
      '#title' => t('Google API key'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => isset($map_data['api_key']) ? $map_data['api_key'] : 'AIzaSyAkkBDnKYln9G2v8PLIFUiUUmqyyiZ4uxw',
    );

    $form['dimensions'] = array(
      '#title' => t('Dimensions'),
      '#type' => 'fieldset',
    );

    $form['dimensions']['width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => isset($map_data['width']) ? $map_data['width'] : '600',
    );

    $form['dimensions']['height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => isset($map_data['height']) ? $map_data['height'] : '450',
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function contact_info_block_save($delta = '', $edit = array()) {
  if ($delta == 'map') {
    // Structure values to save into contact info array.
    $values = array(
      'api_key' => $edit['api_key'],
      'width' => $edit['width'],
      'height' => $edit['height'],
    );

    variable_set('contact_info_map', $values);
  }
}

/**
 * Content for address block.
 */
function contact_info_address_block() {
  // Grab contact info data.
  $contact_info = variable_get('contact_info', '');

  // Set up variables to send to the theme function.
  $variables = array();
  foreach ($contact_info['address'] as $key => $value) {
    if (isset($value) && strlen($value)) {
      $variables[$key] = check_plain($value);
    }
  }

  $output = theme('address', $variables);
  return $output;
}

/**
 * Content for map block.
 */
function contact_info_map_block() {
  // Grab contact info data.
  $contact_info = variable_get('contact_info', '');
  $map_settings = variable_get('contact_info_map', '');

  $output = NULL;

  // Check to see if an API key exists.
  if (!isset($map_settings['api_key'])) {
    drupal_set_message(t('Please provide a Google API key for the embedded map to work properly'), 'warning');
    return $output;
  }

  if (isset($contact_info['address'])) {
    // Construct an address string.
    $address = $contact_info['address'];
    $address_string = $address['street_address'] . ' ';
    if (strlen($address['street_address_2'])) {
      $address_string .= $address['street_address_2'] . ' ';
    }
    $address_string .= $address['locality'] . ' ';
    $address_string .= $address['region'] . ' ';
    $address_string .= $address['postal_code'] . ' ';

    $output = '<iframe width="' . $map_settings['width'] . '" height="' . $map_settings['height'] . '" frameborder="0" ';
    $output .= 'style="border:0" src="https://www.google.com/maps/embed/v1/place?key=';
    $output .= $map_settings['api_key'] . '&amp;q=' . urlencode(str_replace(' ', '+', $address_string));
    $output .= '"></iframe>';
  }

  return $output;
}

/**
 * Content for phone number block.
 */
function contact_info_phone_block() {
  // Grab contact info data.
  $contact_info = variable_get('contact_info', '');

  // Phone.
  $phone = $contact_info['phone'];
  if (isset($phone['number']) && $phone['number']) {
    if (!isset($phone['country_code']) && !strlen($phone['country_code'])) {
      $phone['country_code'] = '1';
    }

    $phone['machine'] = preg_replace('/[^0-9]/', '', $contact_info['phone']['number']);
    return l($phone['number'], 'tel:+' . $phone['country_code'] . $phone['machine'], array(
      'attributes' => array(
        'itemprop' => 'telephone',
        'class' => array('telephone'),
      ),
    ));
  }
  else {
    return FALSE;
  }
}

/**
 * Content for fax number block.
 */
function contact_info_fax_block() {
  // Grab contact info data.
  $contact_info = variable_get('contact_info', '');

  $fax = $contact_info['fax'];
  if (isset($fax['number']) && $fax['number']) {
    return '<span itemprop="faxNumber">' . check_plain($fax['number']) . '</span>';
  }
  else {
    return FALSE;
  }
}

/**
 * Content for social block.
 */
function contact_info_social_block() {
  $data = array();

  $contact_info = variable_get('contact_info', '');

  // Structure data for output.
  foreach ($contact_info['social']['table'] as $key => $social_site) {
    if ($social_site && $social_site['enable']) {
      $data[$key] = array(
        'url' => $social_site['url'],
        'weight' => $social_site['weight'],
        'name' => $social_site['name'],
      );
    }
  }

  // Sort data array by weight.
  uasort($data, 'contact_info_sort_weight');

  $output = array();

  // Build render array to output social media links.
  if ($data) {
    // Start building out social media stuffs.
    $output['social'] = array(
      '#prefix' => '<div class="social">',
      '#suffix' => '</div>',
    );

    foreach ($data as $social_site_key => $social_site) {
      $output['social'][$social_site_key] = array(
        '#theme' => 'link',
        '#text' => $social_site['name'],
        '#path' => $social_site['url'],
        '#options' => array(
          'html' => TRUE,
          'attributes' => array(),
        ),
      );
    }
  }

  return $output;
}

/**
 * Helper function to sort weights.
 */
function contact_info_sort_weight($a, $b) {
  if (isset($a['weight']) && isset($b['weight'])) {
    return ($a['weight'] - $b['weight']);
  }
}
